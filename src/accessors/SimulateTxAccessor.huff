/// @title Executor-huff, a contract to execute transactions
/// @notice SPDX-License-Identifier: MIT
/// @author Malik_dev /      
/// @notice Executor-huff Implementation in Huff

#include "./base/Executor.huff"

/**STORAGE**/
#define constant accessorSingleton = FREE_STORAGE_POINTER()

/**INTERFACES**/
#define function simulate(address, uint256, bytes, uint8) payable returns(bool)

#define macro ONLY_DELEGATE_CALL() = takes(0) returns(0) {
  address                //[address(this)]
  0x00 sload             //[loaded_slot_0, address(this)]
  eq success             //[sucess_pc, result] 
  jumpi
    0x00 0x00 revert     //[]

  success:
}

#define macro CONSTRUCTOR() = takes() returns() {
  address 0x00          //[0x00, address(this)]
  sstore                //[]
}

#define macro simulate() =  takes(4) returns(1) {
    0NLY_DELEGATE_CALL()   //[]
    //input stack:         //[to]
    //input stack:         //[operation,data,value,to]
    gas dup1               //[gas,gas,operation,data,value,to]
    swap3 swap1            //[gas,data,operation,gas,value,to]
    swap4                  //[value,data,operation,gas,gas,to]
    dup6                   //[to,value,data,operation,gas,gas,to]
    EXECUTE()              //[call_result,gas,to]
    swap1                  //[gas,call_result,to]
    gas                    //[gas_1,gas,call_result,to]
    swap1 sub              //[estimate,call_result,to]

    
}