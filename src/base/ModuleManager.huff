/// @title ModuleManager-huff, a contract to manage safe modules
/// @notice SPDX-License-Identifier: MIT
/// @author Malik_dev /      
/// @notice ModuleManager-huff Implementation in Huff

#include "./common/SelfAuthorized.huff"
#include "./Executor.huff"

/**STORAGE**/
#define constant SENTINEL_MODULES = 0x1;

#define constant modules = FREE_STORAGE_POINTER()

//Events
#define event EnabledModule(address indexed);
#define event DisabledModule(address indexed);
#define event ExecutionFromModuleSuccess(address indexed);
#define event ExecutionFromModuleFailure(address indexed);

/**INTERFACES**/
#define function setupModules(address, bytes);
#define function enableModule(address);
#define function disableModule(address, address);
#define function exexFunctionFromModule(address,uint256,bytes,uint8) returns(bool);
#define function execTransactionFromModuleReturnData(address,uint256,bytes,uint8) returns(bool, bytes);
#define function isModuleEnables(address) view returns(bool);
#define function getModulesPaginated(address, uint256) view returns(address[], address);
#define function isContract(address) view returns(bool);

#define macro  SETUPMODULES() takes(2) returns(0) {
   //input stack          //[address_to]
   //input stack          //[address_to]

}

/**
* @notice Enables the module `module` for the Safe.
* @dev This can only be done via a Safe transaction.
* @param module Module to be whitelisted.
*/
#define macro ENABLEMODULE() takes(1) returns(0) {
    SELFAUTHORIZED()
    //input stack                     //[address_to]
    0x00 dup2                         //[address_to,0x00,address_to]
    eq iszero dup2 [SENTINEL_MODULES] //[sentinel_slot,address_to,iszero_result,address_to]
    sload eq iszero and iszero        //[iszero_result, address_to]
    TRUE jumpi
     [modules] 0x00 mstore            //[address_to]
     dup1 0x20  mstore                //[address_to]
     0x40 0x00 sha3 sload             //[loaded_value, address_to]
     0x00 eq TRUES                    //[TRUESPC, address_to]
     jumpi  
       0x4753313032 0x00 mstore       //[address_to]
       pop                            //[]
       0x20 0x00 revert               //[]
       

       TRUES:
        [modules] 0x00 mstore         //[address_to]
        dup1 0x20 mstore              //[address_to]
        0x40 0x00 sha3                //[slot,address_to]
        [modules] 0x00 mstore         //[slot,address_to]
        [SENTINEL_MODULES] 0x20 sload //[loaded_value,slot,address_to]
        0x40 0x00 sha3 sload          //[loaded_value,slot,address_to]
        swap1 sstore                  //[address_to]
        [modules] 0x00 mstore         //[address_to]
        [SENTINEL_MODULES] sload 0x20 //[0x20,loaded_value,address_to]
        mstore dup1 0x40 0x00 sha3    //[slot,address_to,address_to]
        sstore                        //[address_to]
        emitEnabledModule(0x20)      //[]




      TRUE:
        0x4753313032 0x00 mstore      //[address_to]
        pop                           //[]
        0x20 0x00 revert              //[]
       
}

/**
* @notice Disables the module `module` for the Safe.
* @dev This can only be done via a Safe transaction.
* @param prevModule Previous module in the modules linked list.
* @param module Module to be removed.
*/
#define macro DISABLEMODULE() takes(2) returns(0) {
    SELFAUTHORIZED()
    //input stack                    //[address_module, address_prevModule]
    dup1 0x00 eq not                 //[not_result,address_module,address_prevModule]
    dup2 [SENTINEL_MODULES] sload    //[loaded_result,address_module,not_result,address_module,address_prevModule]
    eq not and TRUE jumpi            //[address_module,address_prevModule]
      0x4753313031 0x00 mstore       //[address_module,address_prevModule]
      0x20 0x00 revert               //[address_module,address_prevModule]

    TRUE:
      [modules] 0x00 mstore          //[address_module,address_prevModule]
      dup2 0x20 mstore               //[address_module,address_prevModule]
      0x40 0x00 sha3                 //[slot,address_module,address_prevModule]
      sload dup2 eq TRUES jumpi      //[address_module,address_prevModule]  
        0x4753313033 0x00 mstore     //[address_module,address_prevModule]
        pop pop                      //[]   
        0x20 0x00 revert             //[] 
        

        TRUES:
          [modules] 0x00 mstore      //[address_module,address_prevModule]
          dup2 0x20 mstore           //[address_module,address_prevModule]  
          0x40 0x00 sha3             //[slot_prev,address_module,address_prevModule]
          [modules] 0x00 mstore      //[slot_prev,address_module,address_prevModule]
          dup2 0x20 mstore           //[slot_prev,address_module,address_prevModule]
          0x40 0x00 sha3             //[slot_module,slot_prev,address_module,address_prevModule]
          sload swap1 sstore         //[address_module,address_prevModule]
          [modules] 0x00 mstore      //[address_module,address_prevModule]
          dup1 0x20 mstore           //[address_module,address_prevModule]
          0x40 0x00 sha3             //[slot,address_module,address_prevModule]
          0x00 swap1 sstore          //[address_module,address_prevModule]
          emitDisabledModule(0x20)   //[address_prevModule]
          pop                        //[]
}

#define macro EXECTRANSACTIONFROMMODULE() takes(4) returns(1) {
  //input stack                      //[address_to]
  //input stack                      //[uint256_value,address_to]
  //input stack                      //[ptr_bytes,uint256_value,address_to]
  //input stack                      //[uint8_enum,ptr_bytes,uint256_value,address_to]
  [SENTINEL_MODULES] sload caller eq //[caller,loaded_value,uint8_enum,ptr_bytes,uint256_value,address_to]
  not [modules] 0x60 mstore          //[eq_result,uint8_enum,ptr_bytes,uint256_value,address_to]
  caller 0x80 mstore 0x40 0x60 sha3  //[slot,eq_result,uint8_enum,ptr_bytes,uint256_value,address_to]
  sload 0x00 eq not and SUCCESS jumpi//[uint8_enum,ptr_bytes,uint256_value,address_to]
    0x4753313034 0x60 mstore           //[uint8_enum,ptr_bytes,uint256_value,address_to]
    pop pop pop pop                    //[]
    0x20 0x60 revert                   //[]

    SUCCESS:
     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF //[max_uint256,uint8_enum,ptr_bytes,uint256_value,address_to]
     swap4 swap1 swap3 swap1                                            //[address_to,uint256_value,ptr_bytes,uint8_operation,uint256_max]
     call                                                               //[call_result]
     0x01 eq TRUE jumpi                                                 //[]
     caller emitExecutionFromModuleFailure(0x20)                        //[]

      TRUE:
       caller emitExecutionFromModuleSuccess(0x20)                      //[]
} 