/// @title  SecuredTokenTransfer - Secure token transfer.
/// @notice SPDX-License-Identifier: MIT
/// @author Malik_dev       
/// @notice SecuredTokenTransfer - implementation in huff

 /**INTERFACES**/
#define function  transferToken(address, address, uint256) payable returns()

#define TRANSFERTOKEN() takes(3) returns(0) {
    // Input Stack:          // [address_token]
    // Input Stack:          // [address_receiver, address_token]
    // Input stack:          // [uint256_amount,address_receiver, address_token]
    swap1                    // [address_receiver,uint256_amount, address_token]
    0xa9059cbb               // [0xa9059cbb. address_receiver, uint256_amount, address_token]
    0xffffffffffffffffffffffffffffffffffffffff  //[0xfff...., 0xa9059cbb, address_receiver, uint256_amount, address_token]
    and                      // [and_result,address_receiver,uint256_amount, address_token]
    224                      // [224,and_result,address_receiver,uint256_amount, address_token]
    shl                      // [encoded_result,address_receiver,uint256_amount, address_token]
    or                       // [encoded_result,uint256_amount,address_token]
    64                       // [64,or_result,uint256_amount,address_token]
    shl                      // [encoded_result,uint256_amount,address_token]
    or                       // [encoded_result,address_token]
    0x20 0x00                // [0x00,0x20,e,t]
    dup3 mload               // [loaded_data,0x00,0x20,e,t]
    dup4 0x20 add            // [added_data,loaded_data, 0x00, 0x20,e,t]
    0x00 dup7                // [address_token,0x00,added_data,loaded_data, 0x00, 0x20,e,t]
    10000 gas sub            // [sub_value,address_token,0x00,added_data,loaded_data, 0x00, 0x20,e,t]
    call swap2               // [e,t,call_result]
    pop pop                  // [call_result]
    returndatasize dup1      // [data_size, data_size, call_result]
    0x00 eq                  // [data_size, data_size, call_result]
    CASE1                    // [CASE1_label_pc, data_size, call_result]
    jumpi                    // [data_size, call_result]
    dup1                     // [data_size,data_size,call_result]
    0x20 eq                  // [0x20,data_size,data_size,call_result]
    CASE2                    // [CASE2_label_pc, data_size, call_result]  
    jumpi                    // [data_size, call_result]
    pop pop                  // []
    0x00 0x00 return         // []


    CASE2:
        swap1                //[call_result, data_size]
        iszero               //[iszero_call_result, data_size]
        0x00 mload iszero    //[iszero_mload_0, iszero_call_result, data_size]
        or iszero swap1 pop  //[iszero_or_result]
        0x00 mstore          //[]
        0x00 0x20 return     //[]

    CASE1:
        swap2                // [call_result, data_size]
        0x00 mstore          // [data_size]
        pop                  // []
        0x00 0x20 return     // []

}